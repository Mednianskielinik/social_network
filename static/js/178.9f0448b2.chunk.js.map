{"version":3,"file":"static/js/178.9f0448b2.chunk.js","mappings":"wKACA,GAAgB,QAAU,4BAA4B,YAAc,gCAAgC,OAAS,2BAA2B,OAAS,4B,mBCYjJ,MATA,SAAoBA,GAChB,IAAIC,EAAO,WAAaD,EAAME,GAC9B,OACI,gBAAKC,UAAWC,EAAAA,OAAgB,IAAMA,EAAAA,OAAc,UAChD,SAAC,KAAO,CAACC,GAAIJ,EAAK,SAAED,EAAMM,QAGtC,ECVA,EAA0B,yBCQ1B,MANA,SAAiBN,GACb,OACI,gBAAKG,UAAWC,EAAe,SAAEJ,EAAMO,SAE/C,E,iDCEMC,GAAeC,EAAAA,EAAAA,GAAU,KAW/B,IAAMC,GAAsBC,EAAAA,EAAAA,GAAU,CAClCC,KAAM,oBADkBD,EAT5B,SAAqBX,GACjB,OACI,kBAAMa,SAAUb,EAAMc,aAAa,WAC/B,SAACC,EAAA,EAAK,CAACC,UAAWC,EAAAA,GAAUC,SAAU,CAACC,EAAAA,EAAUX,GAAeF,KAAK,aAAac,YAAY,wBAC9F,uCAGZ,IAiCA,MA3BA,SAAoBpB,GAKhB,IAAqB,IAAjBA,EAAMqB,OACN,OAAO,SAAC,KAAQ,CAAChB,GAAI,WAGzB,IAAIiB,EAAiBtB,EAAMuB,aAAaC,YAAYC,KAAI,SAAAC,GAAM,OAAI,SAAC,EAAU,CAAiBpB,KAAMoB,EAAOpB,KAC9BJ,GAAIwB,EAAOxB,IADLwB,EAAOxB,GACG,IACzFyB,EAAW3B,EAAMuB,aAAaI,SAASF,KAAI,SAAAlB,GAAO,OAAI,SAAC,EAAO,CAAkBA,QAASA,EAAQA,SAA7BA,EAAQL,GAA+B,IAE/G,OACI,iBAAKC,UAAWC,EAAAA,QAAe,WAC3B,gBAAKD,UAAWC,EAAAA,YAAmB,SAC9BkB,KAEL,iBAAKnB,UAAWC,EAAAA,SAAgB,UAC3BuB,GACD,SAACjB,EAAmB,CAACG,SAnBhB,SAACe,GACd5B,EAAM6B,YAAYD,EAAOE,WAC7B,SAsBJ,E,oBC5BA,GAAeC,E,QAAAA,KACXC,EAAAA,EAAAA,KAfkB,SAACC,GAAK,MACxB,CACIV,aAAcU,EAAMC,YACvB,IAGoB,SAACC,GACtB,MAAO,CACHN,YAAa,SAACC,GACVK,GAASC,EAAAA,EAAAA,GAAqBN,GAClC,EAER,KCfgC,SAACO,GAU7B,OAAOL,EAAAA,EAAAA,KAF0B,SAACC,GAAK,MAAM,CAACZ,OAAQY,EAAMK,KAAKjB,OAAO,GAEjEW,EATP,SAA2BhC,GACvB,OAAqB,IAAjBA,EAAMqB,QACC,SAAC,KAAQ,CAAChB,GAAI,YAElB,SAACgC,GAAS,UAAKrC,GAC1B,GAKJ,GDMA,CAGEuC,E","sources":["webpack://my-app/./src/components/Dialog/DialogList.module.css?7087","components/Dialog/DialogItem/DialogItem.jsx","webpack://my-app/./src/components/Dialog/Messages/Message.module.css?6396","components/Dialog/Messages/Message.jsx","components/Dialog/DialogList.jsx","components/Dialog/DialogListContainer.jsx","hoc/withAuthRedirect.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"dialogs\":\"DialogList_dialogs__93ktO\",\"dialogItems\":\"DialogList_dialogItems__Kpz3d\",\"dialog\":\"DialogList_dialog__p+BjQ\",\"active\":\"DialogList_active__NpbyE\"};","import React from 'react';\nimport styles from './../DialogList.module.css';\nimport { NavLink } from \"react-router-dom\";\n\nfunction DialogItem(props) {\n    let path = 'dialogs/' + props.id;\n    return (\n        <div className={styles.dialog + ' ' + styles.active}>\n            <NavLink to={path}>{props.name}</NavLink>\n        </div>\n    );\n}\n\nexport default DialogItem;\n","// extracted by mini-css-extract-plugin\nexport default {\"message\":\"Message_message__c5yTT\"};","import React from 'react';\nimport styles from './Message.module.css';\n\nfunction Message(props) {\n    return (\n        <div className={styles.message}>{props.message}</div>\n    );\n}\n\nexport default Message;\n","import React from 'react';\nimport styles from './DialogList.module.css';\nimport DialogItem from \"./DialogItem/DialogItem\";\nimport Message from \"./Messages/Message\";\nimport {Navigate} from \"react-router-dom\";\nimport {Field, reduxForm} from \"redux-form\";\nimport {Textarea} from \"../common/FormsControls/FormsControls\";\nimport {maxLength, required} from \"../../utils/validators/validators\";\n\nconst maxLength100 = maxLength(100);\n\nfunction MessageForm(props) {\n    return (\n        <form onSubmit={props.handleSubmit}>\n            <Field component={Textarea} validate={[required, maxLength100]} name='newMessage' placeholder='Enter your message'/>\n            <button>Send</button>\n        </form>\n    )\n}\n\nconst AddMessageFormRedux = reduxForm({\n    form: 'dialogAddMessage'\n})(MessageForm);\n\nfunction DialogList(props) {\n    let addMessage = (values) => {\n        props.sendMessage(values.newMessage);\n    }\n\n    if (props.isAuth === false) {\n        return <Navigate to={'/login'}/>\n    }\n\n    let dialogsElement = props.messagesPage.dialogsData.map(dialog => <DialogItem key={dialog.id} name={dialog.name}\n                                                                                 id={dialog.id}/>)\n    let messages = props.messagesPage.messages.map(message => <Message key={message.id} message={message.message}/>);\n\n    return (\n        <div className={styles.dialogs}>\n            <div className={styles.dialogItems}>\n                {dialogsElement}\n            </div>\n            <div className={styles.messages}>\n                {messages}\n                <AddMessageFormRedux onSubmit={addMessage}/>\n            </div>\n\n        </div>\n    );\n}\n\nexport default DialogList;\n","import React from 'react';\nimport {messageActionCreator} from \"../../redux/dialogsReducer\";\nimport DialogList from \"./DialogList\";\nimport {connect} from \"react-redux\";\nimport {withAuthRedirect} from \"../../hoc/withAuthRedirect\";\nimport {compose} from \"redux\";\n\nlet mapStateToProps = (state) => (\n    {\n        messagesPage: state.dialogsPage,\n    }\n)\n\nlet mapDispatchToProps = (dispatch) => {\n    return {\n        sendMessage: (newMessage) => {\n            dispatch(messageActionCreator(newMessage));\n        }\n    }\n}\n\nexport default compose(\n    connect(mapStateToProps, mapDispatchToProps),\n    withAuthRedirect,\n)(DialogList);\n","import {Navigate} from \"react-router-dom\";\nimport React from \"react\";\nimport {connect} from \"react-redux\";\n\nexport const withAuthRedirect = (Component) => {\n    function RedirectComponent(props) {\n        if (props.isAuth === false) {\n            return <Navigate to={'/login'} />\n        }\n        return <Component {...props} />\n    }\n\n    let mapStateToPropsForRedirect = (state) => ({isAuth: state.auth.isAuth})\n\n    return connect(mapStateToPropsForRedirect)(RedirectComponent);\n}"],"names":["props","path","id","className","styles","to","name","message","maxLength100","maxLength","AddMessageFormRedux","reduxForm","form","onSubmit","handleSubmit","Field","component","Textarea","validate","required","placeholder","isAuth","dialogsElement","messagesPage","dialogsData","map","dialog","messages","values","sendMessage","newMessage","compose","connect","state","dialogsPage","dispatch","messageActionCreator","Component","auth","DialogList"],"sourceRoot":""}